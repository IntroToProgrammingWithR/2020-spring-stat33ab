
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R version 3.6.2 (2019-12-12) -- Dark and Stormy Night
Type 'citation()', 'contributors()', or 'license()' for more information

Libraries:
* /home/nick/.config/R/library
* /usr/lib/R/library

> 3 + 3
[1] 6
> # R has a Read-Eval-Print Loop (REPL):
> #   1. Type an expression at the R prompt and hit the enter key.
> #   2. R reads the expression.
> #   3. R evaluates the expression to compute a result.
> #   4. R prints the result in the console.
> #   5. R loops back to waiting for you to enter an expression.
> #
> # This is similar to Python, Julia, Lisp, etc.
> 2 + 2
[1] 4
> # R has a Read-Eval-Print Loop (REPL):
> #   1. Type an expression at the R prompt and hit the enter key.
> #   2. R reads the expression.
> #   3. R evaluates the expression to compute a result.
> #   4. R prints the result in the console.
> #   5. R loops back to waiting for you to enter an expression.
> #
> # This is similar to Python, Julia, Lisp, etc.
> 2 + 2
[1] 4
> sum(1, 2, 3)
[1] 6
> 2 + 2
[1] 4
> sum
function (..., na.rm = FALSE)  .Primitive("sum")
> log(3)
[1] 1.098612
> sqrt(4)
[1] 2
> sin(10)
[1] -0.5440211
> # Getting Help
> # ============
> # R has built-in documentation.
> #
> # The `?` command gets documentation about a specific function or topic:
> ?sum
> ??graphics
> ?+
. 
. # Order of Operations
. # ===================
. # The order of operations in R is similar to math and most programming
. # languages.
. #
. # To see the full list:
. ?Syntax
> ?+
. 
. # Order of Operations
. # ===================
. # The order of operations in R is similar to math and most programming
. # languages.
. #
. # To see the full list:
. ?Syntax
> ?+
. 
. _
Error: unexpected input in:
"
_"
> ?"+"
> ?"for"
> # Order of Operations
> # ===================
> # The order of operations in R is similar to math and most programming
> # languages.
> #
> # To see the full list:
> ?Syntax
> x = 5
> x <- 5
> ?log
> log(10)
[1] 2.302585
> log(10, 2)
[1] 3.321928
> log(base = 2, x = 10)
[1] 3.321928
> log(base = 2, x = y <- 10)
[1] 3.321928
> log(base = 2, x = y = 10)
Error: unexpected '=' in "log(base = 2, x = y ="
> # Vectors & Vectorization
> # =======================
> # There's no such thing as a scalar in R.
> #
> # We can combine values (or vectors) into a single vector with the `c()`
> # function:
> 5
[1] 5
> # Vectors & Vectorization
> # =======================
> # There's no such thing as a scalar in R.
> #
> # We can combine values (or vectors) into a single vector with the `c()`
> # function:
> c(5, 12, 6)
[1]  5 12  6
> # Vectors & Vectorization
> # =======================
> # There's no such thing as a scalar in R.
> #
> # We can combine values (or vectors) into a single vector with the `c()`
> # function:
> x = c(5, 12, 6)
> x
[1]  5 12  6
> y = c("hi", 'hello')
> y
[1] "hi"    "hello"
> c(5, "hi")
[1] "5"  "hi"
> c("hi", 5)
[1] "hi" "5" 
> c(TRUE, 5)
[1] 1 5
> c(5, 5i)
[1] 5+0i 0+5i
> c(5, c(6, 7))
[1] 5 6 7
> x
[1]  5 12  6
> c(x, 8)
[1]  5 12  6  8
> c(1, 2, 3) + c(1, 2, 3)
[1] 2 4 6
> sin(c(1, 2, 4))
[1]  0.8414710  0.9092974 -0.7568025
> c(1, 2, 3) + c(4, 5, 6, 7)
Warning in c(1, 2, 3) + c(4, 5, 6, 7) :
  longer object length is not a multiple of shorter object length
[1] 5 7 9 8
> mean(c(1, 2, 3, 4))
[1] 2.5
> # Copy-on-Write Semantics
> # =======================
> # R uses copy-on-write semantics for assignment.
> #
> # This means that if we assign `x` to `y`:
> x = c(1, 2)
> y = x
> # And then modify `y`:
> y[1] = 7
> x
[1] 1 2
> y
[1] 7 2
>
