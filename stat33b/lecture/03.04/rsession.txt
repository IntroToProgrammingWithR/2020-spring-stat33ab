
R version 3.6.2 (2019-12-12) -- "Dark and Stormy Night"
Copyright (C) 2019 The R Foundation for Statistical Computing
Platform: x86_64-pc-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

  Natural language support but running in an English locale

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

R version 3.6.2 (2019-12-12) -- Dark and Stormy Night
Type 'citation()', 'contributors()', or 'license()' for more information

Libraries:
* /home/nick/.config/R/library
* /usr/lib/R/library

> stores = readRDS("data/grocery/stores.rds")
> items = readRDS("data/grocery/items.rds")
> inv = readRDS("data/grocery/inventory.rds")
> stores
> inv
> merge(items, inv)
> x = 5
> if (x < 5)
.   message("x is less than 5!")
> x = 5
> if (x >= 5)
.   message("x is less than 5!")
x is less than 5!
> x = 5
> if (x < 5)
.   message("x is less than 5!")
> else
Error: unexpected 'else' in "else"
> if (x < 5)
.   message("x is less than 5!")
> else
Error: unexpected 'else' in "else"
> x = 5
> if (x < 5)
.   message("x is less than 5!")
> else
Error: unexpected 'else' in "else"
> x = 3
> if (x < 5) {
.   message("hello!")
.   message("x is less than 5!")
. }
hello!
x is less than 5!
> x = 6
> if (x < 5) {
.   message("hello!")
.   message("x is less than 5!")
. } else {
.   message("x is greater than or equal to 5!")
. }
x is greater than or equal to 5!
> x = 6
> if (x < 5) {
.   message("hello!")
.   message("x is less than 5!")
. } else if (x %% 2 == 0) { # if x is even
.   message("x is even!")
. } else {
.   message("x is greater than or equal to 5, and odd!")
. }
x is even!
> x = 7
> if (x < 5) {
.   message("hello!")
.   message("x is less than 5!")
. } else if (x %% 2 == 0) { # if x is even
.   message("x is even!")
. } else {
.   message("x is greater than or equal to 5, and odd!")
. }
x is greater than or equal to 5, and odd!
> x = 3
> y = if (x < 5) 42
> y
[1] 42
> x = 19
> y = if (x < 5) 42 else 8
> y
[1] 8
> y = if (x < 5) 42
> y
NULL
> x = 1
> y = if (x < 5) {
.   47
.   32
.   31
. }
> y
[1] 31
> y = {
.   61
.   32
.   51
. }
> y
[1] 51
> x = c(1, 2, 3)
> if (x < 2) {
.   message("x is less than 2!")
. }
the condition has length > 1 and only the first element will be usedx is less than 2!
> x < 2
[1]  TRUE FALSE FALSE
> ifelse(x < 2, x, 10)
[1]  1 10 10
> switch(x,
.        "hello" = message("You said hello!"),
.        "bye" = {
.          message("Leaving so soon?")
.          message("I hoped you'd stay")
.        }
. )
Error in switch(x, hello = message("You said hello!"), bye = { : 
  EXPR must be a length 1 vector
> x = "hello"
> switch(x,
.        "hello" = message("You said hello!"),
.        "bye" = {
.          message("Leaving so soon?")
.          message("I hoped you'd stay")
.        }
. )
You said hello!
> x = "bye"
> switch(x,
.        "hello" = message("You said hello!"),
.        "bye" = {
.          message("Leaving so soon?")
.          message("I hoped you'd stay")
.        }
. )
Leaving so soon?
I hoped you'd stay
> x = "33b"
> switch(x,
.        "hello" = message("You said hello!"),
.        "bye" = {
.          message("Leaving so soon?")
.          message("I hoped you'd stay")
.        }
. )
> switch(x,
.        "hello" = message("You said hello!"),
.        "bye" = {
.          message("Leaving so soon?")
.          message("I hoped you'd stay")
.        },
.        message("Your variable didn't match")
. )
Your variable didn't match
> switch(x,
. 

> x = 1
> switch(x,
.        message("x is 1"),
.        message("x is 2"))
x is 1
> switch(x,
.        1,
.        30)
[1] 1
> mycases = list(1, 30)
> mycases[[x]]
[1] 1
> x = "hi"
> switch(x,
.        message("x is 1"),
.        message("x is 2"))
Error: duplicate 'switch' defaults: 'message("x...' and 'message("x...'
> switch(x,
.        message("x is 1"))
x is 1
> sin(c(1, 2, 3))
[1] 0.8414710 0.9092974 0.1411200
> mydata = list(1:3, seq(10, 20, 0.5))
> mydata
[[1]]
[1] 1 2 3

[[2]]
 [1] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 15.0 15.5 16.0 16.5 17.0
[16] 17.5 18.0 18.5 19.0 19.5 20.0

> mean(mydata[[1]])
[1] 2
> mean(mydata[[2]])
[1] 15
> lapply(mydata, mean)
[[1]]
[1] 2

[[2]]
[1] 15

> mydata = list(1:3, seq(10, 20, 0.5), rnorm(10))
> mydata
[[1]]
[1] 1 2 3

[[2]]
 [1] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 15.0 15.5 16.0 16.5 17.0
[16] 17.5 18.0 18.5 19.0 19.5 20.0

[[3]]
 [1] -0.5262522 -0.3199366 -2.0580009 -0.8737374  0.5186656  0.6600099  0.4604082
 [8] -0.7867021 -0.1838129  0.1224701

> lapply(mydata, mean)
[[1]]
[1] 2

[[2]]
[1] 15

[[3]]
[1] -0.2986888

> lapply(c(1, 2, 3), sin)
[[1]]
[1] 0.841471

[[2]]
[1] 0.9092974

[[3]]
[1] 0.14112

> dogs = readRDS("data/dogs/dogs_full.rds")
> lapply(dogs, class)
$breed
[1] "character"

$group
[1] "factor"

$datadog
[1] "numeric"

$popularity_all
[1] "integer"

$popularity
[1] "integer"

$lifetime_cost
[1] "numeric"

$intelligence_rank
[1] "integer"

$longevity
[1] "numeric"

$ailments
[1] "integer"

$price
[1] "numeric"

$food_cost
[1] "numeric"

$grooming
[1] "factor"

$kids
[1] "factor"

$megarank_kids
[1] "integer"

$megarank
[1] "integer"

$size
[1] "factor"

$weight
[1] "numeric"

$height
[1] "numeric"

> sapply(dogs, class)
            breed             group           datadog    popularity_all 
      "character"          "factor"         "numeric"         "integer" 
       popularity     lifetime_cost intelligence_rank         longevity 
        "integer"         "numeric"         "integer"         "numeric" 
         ailments             price         food_cost          grooming 
        "integer"         "numeric"         "numeric"          "factor" 
             kids     megarank_kids          megarank              size 
         "factor"         "integer"         "integer"          "factor" 
           weight            height 
        "numeric"         "numeric" 
> mydata = list(c(1:3, NA), seq(10, 20, 0.5), rnorm(10))
> mydata
[[1]]
[1]  1  2  3 NA

[[2]]
 [1] 10.0 10.5 11.0 11.5 12.0 12.5 13.0 13.5 14.0 14.5 15.0 15.5 16.0 16.5 17.0
[16] 17.5 18.0 18.5 19.0 19.5 20.0

[[3]]
 [1] -1.58560001 -0.90648829  0.58226893  0.86816968  0.13024640 -0.81245411
 [7]  0.97481942 -0.12427849 -0.04490119 -0.43612044

> lapply(mydata, mean)
[[1]]
[1] NA

[[2]]
[1] 15

[[3]]
[1] -0.1354338

> mean(mydata[[1]], na.rm = TRUE)
[1] 2
> lapply(mydata, mean, na.rm = TRUE)
[[1]]
[1] 2

[[2]]
[1] 15

[[3]]
[1] -0.1354338

> sapply(mydata, mean)
[1]         NA 15.0000000 -0.1354338
> sapply(mydata, mean, na.rm = TRUE)
[1]  2.0000000 15.0000000 -0.1354338
> vapply(dogs, class, "")
            breed             group           datadog    popularity_all 
      "character"          "factor"         "numeric"         "integer" 
       popularity     lifetime_cost intelligence_rank         longevity 
        "integer"         "numeric"         "integer"         "numeric" 
         ailments             price         food_cost          grooming 
        "integer"         "numeric"         "numeric"          "factor" 
             kids     megarank_kids          megarank              size 
         "factor"         "integer"         "integer"          "factor" 
           weight            height 
        "numeric"         "numeric" 
> vapply(dogs, class, 4)
Error in vapply(dogs, class, 4) : values must be type 'double',
 but FUN(X[[1]]) result is type 'character'
> sapply(mydata, mean, na.rm = c(TRUE, FALSE, FALSE))
the condition has length > 1 and only the first element will be usedthe condition has length > 1 and only the first element will be usedthe condition has length > 1 and only the first element will be used[1]  2.0000000 15.0000000 -0.1354338
> x = 1:3
> y = 2:4
> x + y
[1] 3 5 7
> mapply(`+`, x, y)
[1] 3 5 7
>
